generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL")
}

model User {
  id                String   @id @default(uuid())
  username          String
  email             String   @unique
  password          String
  tokenVersion      Int      @default(1)
  isVerified        Boolean  @default(false)
  verificationToken String?  @unique
  createdAt         DateTime @default(now())

  tasks         Task[]         @relation("UserTasks")
  folders       Folder[]       @relation("UserFolders")
  refreshTokens RefreshToken[] @relation("UserRefreshTokens")
}

model RefreshToken {
  token     String   @id
  userId    String
  sessionId String
  expiresAt DateTime
  revoked   Boolean  @default(false)

  user User @relation("UserRefreshTokens", fields: [userId], references: [id], onDelete: Cascade)
}

model Task {
  id           String    @id @default(uuid())
  title        String
  description  String?
  completed    Boolean   @default(false)
  userId       String
  parentTaskId String?
  createdAt    DateTime  @default(now())
  expiresAt    DateTime?
  folderId     String?

  user       User    @relation("UserTasks", fields: [userId], references: [id], onDelete: Cascade)
  parentTask Task?   @relation("Subtasks", fields: [parentTaskId], references: [id], onDelete: Cascade)
  subtasks   Task[]  @relation("Subtasks")
  folder     Folder? @relation("TaskFolders", fields: [folderId], references: [id], onDelete: SetNull)
}

model Folder {
  id     String @id @default(uuid())
  name   String
  userId String

  user  User   @relation("UserFolders", fields: [userId], references: [id], onDelete: Cascade)
  tasks Task[] @relation("TaskFolders")
}
